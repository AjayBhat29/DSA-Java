/* Petya wants to bring sofa(s) to his room. But he wants to dedicate the entire length of the room to the sofa(s) (yes I know he is a bit weird).
Now Petya's room length is W meters, and when he went to the shop he found out sofas of two types, one of length N and other of length M.
Now, let Petya know how many sofas of the first and second type he should buy to reduce wastage of space. 
First minimize the space wastage then, if similar result arises always prefer the sofa with a larger length. 
In case N==M give preference to second sofa.

Input format
The first line contains an integer T, denoting the number of test cases.
Each test case contains three integers W,N and M. 

Output format
For every testcase print two integers a and b, number of sofa of type 1 and 2 respectively.

Constraints
1<=T<=10

1<=N,M,W<=10000

Time Limit 1 second

Example
Input
1
24 3 5

Output
3 3

Sample test case Explanation
Petya will buy 3 sofas of size 3 and 3 sofa's of size 5. */

static class Task {
		public void solve(int testNumber, FastReader scan, PrintWriter out) {
			long w = scan.nextLong();
			long n = scan.nextLong();
			long m = scan.nextLong();
			if (m == n) {
				out.println(0 + " " + w / m);
				return;
			}
			// rememebr m is more preferred.
			long ansN = 0, ansM = 0;
			while (w > 0) {
				/* line 1 */ long toSub = (w % n >= w % m) ? m : n;// (if the empty space remaining geneated by n) >= (empty space generated by m). Use m, else use n.

				if (w % n == w % m) { // if empty spaces generated are equal, occupy width(w) with the longer sofa
					if (n <= m) {
						ansM++;
						toSub = m;
					} else {
						ansN++;
						toSub = n;
					}
				} else if (toSub == m)// if condition on line 1 satisfies
					ansM++;
				else // if condition on line 1 does not satisfy
					ansN++;
				w -= toSub; // occupy the width(w) with the calculated value
				if (w < n && w < m) // when neither of the sofas can be fitted into the wall
					break;
			}
			out.println(ansN + " " + ansM);
		}
	}
